<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE preface PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
                 "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="why-sd-graph">
    <title>Why Spring Data Graph?</title>
   
    <para><ulink url="http://en.wikipedia.org/wiki/NoSQL">NOSQL</ulink>
    stores provide alternative storage solutions that are more tailored to the needs of
	the data structure requirements that are specific to each project than just using a relational
	database as a "one-size-fits-all" solution.
	</para>
	<para>
	Graph databases provide excellent support for network data, i.e. data that easily can be structured
	as connected nodes. Property graph databases like Neo4j support arbitrary numbers of named properties on both
	nodes and relationships. They are highly performant when traversing large, complex datasets with
	millions of nodes and relationships, even on commodity hardware.
	</para>
	<para>
		Neo4j is an open source graph database written in Java. It has excellent performance characteristics while providing ACID
		semantics and transactional support (both JTA and XA transactions). Neo4j can run as a lightweight embedded database as well as a standalone
		server that exposes the API via a rich REST interface.
	</para>
	
    <para>The Spring Data Graph (or DATAGRAPH) framework makes it easy to 
    integrate graph databases in existing or new Spring applications by providing
	infrastructure that reduces the amount of boilerplate data access code and uses
	commonly known patterns and idioms that are well known in the Spring Framework community.
	Those practices are based on a simple POJO programming model that leverages annotations to add metadata and can be
	integrated in any part of a spring application, like the web or service layers.
	</para>
	<para>
	A special use case of Spring Data Graph is the cross store solution that can extend existing JPA data models with new parts
	(properties, entities, relationships) that are stored exclusively in the graph while being transparently integrated with the JPA
	entities. This enables for easy and seamless addition of new features that were not available before to JPA-based applications.
	</para>
</chapter>